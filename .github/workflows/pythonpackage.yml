name: Python package

on: [push, pull_request]

env:
  PY_COLORS: "1"

jobs:
  codegen:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.6", "3.10"]
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nala
        pip install -e .
    - name: Test
      run: |
        env PYTHONPATH=. python examples/hello_world.py
        env PYTHONPATH=. python examples/diagnostics/did.py
        make test-c-clean
        make test-c
        make test-c-clean
        CC=gcc make test-c
        make test-c-clean
        CC=clang make test-c-src
    - name: Coveralls
      uses: AndreMiras/coveralls-python-action@develop
      with:
        parallel: true
        flag-name: Code Generator Test

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:

          # we cannot simply define a matrix for [ubuntu-latest,
          # macos-latest, windows-latest] times [python-3.6 ,
          # python-3.10] directly because python 3.6 is not available on
          # ubuntu-latest anymore. The workaround is to make a long 1D
          # matrix and set the matrix variables manually via
          # includes. This is pretty clunky, but job-conditionals are
          # not allowed to depend on matrix variables and other
          # solutions like preparing the matrix using a separate job
          # seem to be even more cumbersome...
          - os: "ubuntu-20.04"
            python-version: "3.6"
          - os: "ubuntu-latest"
            python-version: "3.8"
          - os: "ubuntu-latest"
            python-version: "3.10"
          - os: "windows-latest"
            python-version: "3.6"
          - os: windows-latest
            python-version: "3.10"
          - os: "macos-latest"
            python-version: "3.6"
          - os: "macos-latest"
            python-version: "3.10"

      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox
    - name: Test
      run: |
        tox -e gh
    - name: Coveralls
      if: matrix.os == 'ubuntu-latest'
      uses: AndreMiras/coveralls-python-action@develop
      with:
        parallel: true
        flag-name: Test ${{ matrix.os }} ${{ matrix.python-version }}

  coveralls_finish:
    needs: [test, codegen]
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: AndreMiras/coveralls-python-action@develop
        with:
          parallel-finished: true

  linter:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mypy
        pip install -e .[plot]
    - name: Static type checking with mypy
      run: |
        mypy --python-version 3.6 .
        mypy --python-version 3.7 .
        mypy --python-version 3.8 .
        mypy --python-version 3.9 .
        mypy --python-version 3.10 .

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Build wheel and sdist
        run: pipx run build
      - name: Check build artifacts
        run: pipx run twine check --strict dist/*

  release:
    needs: [test, codegen, linter, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install pypa/build
      run: |
        python -m pip install build --user
    - name: Build a binary wheel and a source tarball
      run: |
        git clean -dfx
        python -m build --sdist --wheel --outdir dist/ .
    - name: Publish distribution ðŸ“¦ to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        skip_existing: true
        password: ${{ secrets.pypi_password }}
